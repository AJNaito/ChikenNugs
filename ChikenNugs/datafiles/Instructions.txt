World file has a list of all possible commands that will be used and it has intro sequences
FOR ALL FILES - DO NOT PUT COMMENTS IN THEM (///)

General JSON Rules
Always label fields with ""
Group things that are related in {}
Separate different objects with , (i.e "syntax": "hi", "proper":"syntax"

STRING EFFECTS (3/12):
You can write a string with certain effects
	Codes:
		0: Base (nothing special)
		1: shaking text
		2: wavey text
		3: shifting colors
		4: wavey + shifting colors
		5: spinning text
		6: pulsing text
		7: flickering text

Syntax example: <1>Hello<0> -- Hello will be drawn in shaking text 

Always end the string with <0> to reset the effect or else everything until the next effect will be drawn with the previous effect
 - <1>Hello this will also be shakey text<2>this will be wavey text<0> this will be normal text

Levels:
- Level name is always under
- Room Files 
Put room under folder of level name they belond to i.e Levels/start_level/room.txt
For simplicity, start room is ALWAYS Base_Room and end room is always End_Room

WORLD FILE - 
{
	"commands": [
		"help",
		"inspect",
		"interact"
	],
	"help": ["?"], // alternative commands to the base commands
	"inspect": [">.>", "o.o"], // alternative commands to the base commands
	"music": ["Intro", "","","",""], // names of files

	"help": "Base verbs: interact and inspect\n
Multi-worded commands like pick up, must be appended with a dash: pick up -> pick-up\n
You can put commands however you like but put objects after the verbs! (i.e inspect room, inspect self)\n
Press Escape to skip text (write whole text)" ,
	
	"intro": "intro text"
}

Room File Syntax - pretty standard JSON
{ // always start with { and end with }
  "name": "Base_Room", /// name of level
  "nugget_level": 1,   /// accessor nugget level (can lock and unlock rooms)
  "connected": ["none", "none", "none", "none"], /// Connected rooms to this one ["north", "south", "east", "west"]
  "commands": ["welcome"],/// accepted commands in this room (keep in lexicographical order for performance reasons)
  "objects": ["nugget"], /// accepted objects in this room (keep in lexicographical order for performance reasons)
  "story": "Description" /// description of the room 
}

Objects: 
Name of the files is the name of the object
Other field is for word association. For example, inspect myself -> inspect self

{ // always begin with { and end with }
	"other": ["names", "that", "will", "return", "same", "result"],
	"start_level": { /// name of the level interaction
		"Base_Room": { /// Room of the interaction
			/// Just an initializer for the start state (alternative states will be a new object)
			/// i.e bottle != broken_bottle (will be another object)
			"state": "default"

			/// different commands - depending on nugget level can interact differently
			/// ["nuggetlevel1", "nuggetlevel2", "nuggetlevel3", "nuggetLevel4", "nuggetlevel5"]
			"welcome": ["you welcome the nugget and the nugget welcomes you",
				"", 
				"", 
				"",
				""
				],

			/// special commands -- start with name of special function i.e play music
			/// follow with name of assett to use followed by a desciption (if any)
			/// separate all fields with :
			"eat": "[play_music:spoopy_music.wav:DESCRIPTION", "", "", "", ""]

			/// move_room - the object forces a room change
			/// if no description (don't include last ':') will simply display the room description 
			"inspect": ["move_room:room_name:DESCRIPTION", "", "", "", ""],

			/// change is changing the state
			"example": [ "change:half_eaten:DESCRIPTION", "", "", "", ""],

			/// conditional - will only display the description if conditions are met
			/// can have multiple conditions
			"example2": [ "conditional:obj_name:condition:obj_2_name:condition2:DESCRIPTION",
					"",
					"",
					"", 
					""],
			"example3": ["conditional:obj_name:condition:DESCRIPTION/play_music:file_name",
					"",
					"",
					"",
					""]
		}	
	}
}

Memory Sequence - Place all memory sequences under Memory folder
Sample Memory:
{
	"story": [
		"WORDS", 
		"WORDS",
		"ETC"
	]

	"effects": [
		"effect_name:0-2" // effect_name will play from story[0]-story[2]
	]
}

To execute multiple instructions for an interaction separate each with '/'

All commands + Descriptions:
change_level:level_name:STORY -> changes the current level
play_music:audio_name         -> Plays a sound file (different from background music)
move_room:room_name:STORY     -> Moves to a specific room within a level ** probably not needed with single room levels
conditional:obj_name:condition:Description -> if else -- can have multiple conditions
change_state:new_state        -> changes the state of a specific item (of inputted item)
change_room:obj_name:state:room_desc:STORY   -> Change multiple items in the story and change room desc (mult items are optional)
memory_sequence:memory_name:STORY -> plays a memory sequence along with story
use:obj_name_needed:state_needed:STORY -> Like conditional but specifically requires obj_name_needed to be held in state_needed to return story


